{"version":3,"sources":["fire.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["fire","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","logText","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","event","wrap","_context","prev","next","preventDefault","database","ref","push","state","text","stop","_x","apply","arguments","captureText","x","target","value","setState","Story","bind","assertThisInitialized","_this2","orderByKey","limitToLast","on","snapshot","val","id","key","console","log","concat","react_default","createElement","class","className","Form","onSubmit","FormGroup","row","Col","sm","Input","type","name","size","onChange","Button","particles_default","height","params","particles","number","density","enable","value_area","color","shape","stroke","width","polygon","nb_sides","image","src","opacity","random","anim","speed","opacity_min","sync","size_min","line_linked","distance","move","direction","straight","out_mode","bounce","attract","rotateX","rotateY","interactivity","detect_on","events","onhover","mode","onclick","resize","modes","grab","bubble","duration","repulse","particles_nb","remove","retina_detect","map","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.e729db94.chunk.js","sourcesContent":["import firebase from 'firebase'\nconst config = {\n  apiKey: \"AIzaSyAgYDtauVULemmJlwXVY5NS-nXhWrK3ioE\",\n  authDomain: \"art8-588f2.firebaseapp.com\",\n  databaseURL: \"https://art8-588f2.firebaseio.com\",\n  projectId: \"art8-588f2\",\n  storageBucket: \"art8-588f2.appspot.com\",\n  messagingSenderId: \"438297753640\",\n  appId: \"1:438297753640:web:e02cb1b669ee8b06\"\n};\nvar fire = firebase.initializeApp(config);\nexport default fire;\n","import React from 'react';\nimport {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Container, Jumbotron, Button, Form, FormGroup, Label, Input, FormText, Col } from 'reactstrap';\nimport fire from './fire';\nimport Particles from 'react-particles-js';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      Story: [],\n      text: ''\n    }\n    this.logText = this.logText.bind(this);\n    this.captureText = this.captureText.bind(this);\n\n  }\n\n  componentWillMount(){\n    /* Create reference to messages in Firebase Database */\n    let messagesRef = fire.database().ref('text').orderByKey().limitToLast(100);\n    messagesRef.on('child_added', snapshot => {\n      /* Update React state when message is added at Firebase Database */\n      let text = { text: snapshot.val(), id: snapshot.key };\n      console.log(text)\n      this.setState({ Story: this.state.Story.concat([text]) });\n    })\n  }\n\n  // Sends this.state.text to database and append to story.\n  logText = async (event) => {\n    event.preventDefault();\n    fire.database().ref('text').push( this.state.text );\n    // let messagesRef = fire.database().ref('text').orderByKey();\n    // messagesRef.on('child_added', snapshot => {\n    //   /* Update React state when message is added at Firebase Database */\n    //   let txt = { text: snapshot.val(), id: snapshot.key };\n    //   this.setState({ Story: [txt] });\n    // })\n  }\n\n  // Captures user's text input\n  captureText = (event) => {\n    event.preventDefault();\n    const x = event.target.value;\n    this.setState({text: x});\n  }\n\n  render() {\n    return (\n      <div>\n        <div class=\"App\">\n        <h1 className=\"display-3\" class=\"title1\">What is your story?</h1>\n        <h1 className=\"display-5\" class=\"title2\">Add a sentence to the end of this story. Add your own story.</h1>\n        <Form onSubmit={this.logText}>\n          <FormGroup row>\n            <Col sm={11}>\n              <Input type=\"textarea\" name=\"text\" id=\"exampleText\" size=\"lg\" onChange={this.captureText}/>\n            </Col>\n            <Button type=\"submit\">Submit</Button>\n          </FormGroup>\n        </Form>\n        <Particles class=\"particle\"\n            height=\"500px\"\n            params={{\n              particles: {\n                number: {\n                  value: 80,\n                  density: {\n                    enable: true,\n                    value_area: 800\n                  }\n                },\n                color: {\n                  value: \"#000000\"\n                },\n                shape: {\n                  type: \"circle\",\n                  stroke: {\n                    width: 0,\n                    color: \"#000000\"\n                  },\n                  polygon: {\n                    nb_sides: 5\n                  },\n                  image: {\n                    src: \"img/github.svg\",\n                    width: 100,\n                    height: 100\n                  }\n                },\n                opacity: {\n                  value: 0.5,\n                  random: false,\n                  anim: {\n                    enable: false,\n                    speed: 1,\n                    opacity_min: 0.1,\n                    sync: false\n                  }\n                },\n                size: {\n                  value: 3,\n                  random: true,\n                  anim: {\n                    enable: false,\n                    speed: 40,\n                    size_min: 0.1,\n                    sync: false\n                  }\n                },\n                line_linked: {\n                  enable: true,\n                  distance: 150,\n                  color: \"#000000\",\n                  opacity: 0.4,\n                  width: 1\n                },\n                move: {\n                  enable: true,\n                  speed: 6,\n                  direction: \"none\",\n                  random: false,\n                  straight: false,\n                  out_mode: \"out\",\n                  bounce: false,\n                  attract: {\n                    enable: false,\n                    rotateX: 600,\n                    rotateY: 1200\n                  }\n                }\n              },\n              interactivity: {\n                detect_on: \"canvas\",\n                events: {\n                  onhover: {\n                    enable: true,\n                    mode: \"repulse\"\n                  },\n                  onclick: {\n                    enable: true,\n                    mode: \"push\"\n                  },\n                  resize: true\n                },\n                modes: {\n                  grab: {\n                    distance: 400,\n                    line_linked: {\n                      opacity: 1\n                    }\n                  },\n                  bubble: {\n                    distance: 400,\n                    size: 40,\n                    duration: 2,\n                    opacity: 8,\n                    speed: 3\n                  },\n                  repulse: {\n                    distance: 200,\n                    duration: 0.4\n                  },\n                  push: {\n                    particles_nb: 4\n                  },\n                  remove: {\n                    particles_nb: 2\n                  }\n                }\n              },\n              retina_detect: true\n            }}/>\n            </div>\n        <h1 className=\"display-3\" class=\"txt\">Linking of the Particles</h1>\n        <p className=\"display-3\" class=\"txt\">By: Collective Anonomous</p>\n        <p class=\"txt\" className=\"lead\">{this.state.Story.map( text => <li class=\"li\" key={text.id}>{text.text}</li> )}</p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}